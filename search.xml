<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/12/27/%E6%9F%A5%E6%89%BEqq/"/>
      <url>/2024/12/27/%E6%9F%A5%E6%89%BEqq/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="查找qq"><a href="#查找qq" class="headerlink" title="查找qq"></a>查找qq</h2><p>1.网上搜索（qq）社工库</p><p>2.Q绑在线查询</p><p>3.搜索引擎和又一套语法</p><p>（双引号加qq号）</p><ol start="4"><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/12/26/%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/12/26/%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><h3 id="文件下载漏洞"><a href="#文件下载漏洞" class="headerlink" title="文件下载漏洞"></a>文件下载漏洞</h3><p>判断文件是否存在文件下载漏洞：</p><p><strong>1.</strong></p><p>一般链接形式：</p><p>date.php?file&#x3D;</p><p>date.php?path&#x3D;</p><p><strong>2</strong></p><p>包含参数：</p><p>&amp;src&#x3D;</p><p>&amp;ata&#x3D;</p><p>目录穿越:   ..&#x2F;返回上一级目录</p><p>​                    返回根目录多加几个..&#x2F;</p><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>通过获取webshell来控制服务器最快的方法</p><p>webshell木马程序基于http协议来访问控制</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/12/26/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/12/26/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>SQL注入分为整型和字符型</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/12/26/%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89/"/>
      <url>/2024/12/26/%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>超文本传输协议；默认端口为80，用于从万维网服务器传输超文本到本地浏览器协议，主要用于规定客户端和服务器的数据传输格式</p><p>HTTP请求分为请求报文和响应报文</p><p>请求报文分为：请求行，请求头部，空一行（请求正文即请求体有的请求报文可能没有）</p><p><strong>直接在浏览器的地址栏中输入 URL 时，通常不会携带请求体</strong></p><p>请求行分为三部分：1.请求方法  2.资源地址（资源定位符） 3.HTTP协议和版本号的说明</p><p>请求方法具有：</p><p><strong>1.GET    请求资源</strong></p><p><strong>2.POST    提交资源</strong></p><p>3.Head    获取响应头</p><p><em><strong>4.DELETE    删除资源</strong></em></p><p><em><strong>5.PUT    替换资源</strong></em></p><p>6.OPTLONS     允许客户端查看服务器性能</p><p>7.TRACE    回显服务器寿佛啊的请求，用于测试或诊断</p><h2 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h2><p>可以抓Edge和谷歌浏览器，火狐浏览器需要设置其他东西即可</p><p>不能抓包微信小程序，因为有设置抓不住，app和小程序不一定能抓，现在大部分都有设置防抓</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/12/24/%E6%9F%A5%E8%AF%A2lP%E5%9C%B0%E5%9D%80/"/>
      <url>/2024/12/24/%E6%9F%A5%E8%AF%A2lP%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查询lP地址"><a href="#查询lP地址" class="headerlink" title="查询lP地址"></a>查询lP地址</h3><h4 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a><strong>Windows：</strong></h4><ol><li><p>打开命令提示符（按 <code>Win + R</code>，然后输入 <code>cmd</code>，按回车）。</p></li><li><p>在命令行窗口中，输入以下命令并按回车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup 网站域名</span><br></pre></td></tr></table></figure><p>例如，要查看 <code>www.example.com</code> 的 IP 地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">nslookup www.example.com</span><br></pre></td></tr></table></figure><h3 id="网站数据库"><a href="#网站数据库" class="headerlink" title="网站数据库"></a>网站数据库</h3><p>SQL注入获取信息</p><p>通过开发工具F12获取信息</p><h3 id="查询php版本"><a href="#查询php版本" class="headerlink" title="查询php版本"></a>查询php版本</h3><h4 id="使用-curl-命令查询-HTTP-响应头："><a href="#使用-curl-命令查询-HTTP-响应头：" class="headerlink" title="使用 curl 命令查询 HTTP 响应头："></a>使用 <code>curl</code> 命令查询 HTTP 响应头：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">curl -I http://example.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2024/12/06/2024-12-06-Java/"/>
      <url>/2024/12/06/2024-12-06-Java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>jdk也称Java jdk，可以理解为Java的库也就是c语言中的头文件吧可能</p><p>sdk则是Java用用于开发软件所存在的一个概念，可以理解为开发工具</p><p>Java是一门具有面向对象的编程语言，Java性能强支持多线程运行</p><p>Java对大小写敏感，Java的类名开头字母需要大写，如果类名存在多个单词则需要每个单词首字母大写，而方法名则是开头需要小写，但是如果存在多个单词则和类名不一样，后面的需要大写，并且源文件名必须与方法名相同保存并加入Java后缀，否则会编译出错</p><p>java标识符必须以字母或者下划线以及$开头，并且对大小敏感，关键字不能作为标识符</p><p>Java修饰符分为访问控制和非访问控制符</p><p>Java变量分为局部变量和静态变量以及非静态变量</p><p>Java在5.0引入了枚举概念</p><p>Java注释与c语言和c++类似，但是加入了文档注释（文档注释以 &#x2F;** 开始，以 *&#x2F; 结束，通常出现在类、方法、字段等的声明前面，用于生成代码文档，这种注释可以被工具提取并生成 API 文档，如 JavaDoc。）</p><p>java继承有超类与子类俩个概念，被继承者称为超类，继承者则称为子类与派生类</p><p>Java接口则在继承中起作用，主要为为派生类定义需要用到的方法</p><p>java在创建对象时必须要有一个构造方法，一般Java会自动创建一个构造一个方法；<em>构造的方法必须与类名一样且一个类可以有多个构造方法</em></p><p>Java源文件中可以有多个类，但是每个类各不相同并且也不能存在俩个相同的类</p><p>如果一个类定义在某个包中，那么 package 语句应该在源文件的首行；如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面；import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</p><p>Java内部类：在Java类中嵌套另外一个类</p><p>嵌套类分为静态内部类和非静态内部类，内部类可以直接访问外部类属性和方法，静态内部类无法访问外部类的成员，当想要外部类无法访问内部类时可以使用private来修饰也称为内部私有化；静态内部类使用staic关键字定义（静态内部类不用创建外部类来访问，因为可以直接访问）</p><p>Java匿名类是不能有名字的类，它们不能被引用，只能在创建时用 <strong>new</strong> 语句来声明它们；匿名类主要用于继承一个父类和实现一个接口</p><p>Java包用于对类和类的接口进行分类</p><p>Java中import语句用于提供一个合理的路径，使编译器可以找到某个类</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型</p><p>数字类型：byte，shout，int，flout，double，long</p><p>字符类型：char</p><p>布尔类型：boolean（默认值为false）</p><ul><li><code>int</code>, <code>short</code>, <code>long</code>, <code>byte</code> 的默认值是0。</li><li><code>char</code> 的默认值是 <code>\u0000</code>（空字符）。</li><li><code>float</code> 的默认值是 <code>0.0f</code>。</li><li><code>double</code> 的默认值是 <code>0.0d</code>。</li><li><code>boolean</code> 的默认值是 <code>false</code>。</li><li>引用类型（类、接口、数组）的默认值是 <code>null</code>。</li></ul><p>JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作</p><h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p><strong>自动类型转化：整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong>转换从低级到高级</p><p><strong>规则</strong>：必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p><p><strong>强制类型转化</strong></p><ol><li>条件是转换的数据类型必须是兼容的。</li><li>格式：(type)value  type是要强制类型转换后的数据类型   实例：</li></ol><p>** 实例**</p><p>public class ForceTransform {    public static void main(String[] args){        int i1 &#x3D; 123;        byte b &#x3D; (byte)i1;&#x2F;&#x2F;强制类型转换为byte        System.out.println(“int强制类型转换为byte后的值等于”+b);    } }</p><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int强制类型转换为byte后的值等于123</span><br></pre></td></tr></table></figure><p><strong>隐含强制类型转化</strong></p><ul><li>1、 整数的默认类型是 int。</li><li><ol start="2"><li>小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f</li><li>java 里使用 long 类型的数据一定要在数值后面加上 L，否则将作为整型解析：</li></ol></li></ul><p>数据类型转换必须满足如下规则：</p><ul><li><ol><li>不能对boolan类型进行类型转换。</li></ol></li><li><ol start="2"><li>不能把对象类型转换成不相关类的对象。</li></ol></li><li><ol start="3"><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</li></ol></li><li><ol start="4"><li>转换过程中可能导致溢出或损失精度，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i =128;   </span><br><span class="line">byte b = (byte)i;</span><br></pre></td></tr></table></figure><p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p></li><li><ol start="5"><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(int)23.7 == 23;        </span><br><span class="line">(int)-45.89f == -45</span><br></pre></td></tr></table></figure></li></ul><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li>​在Java中，引用类型的变量非常类似于C&#x2F;C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li><li>​对象、数组都是引用数据类型。</li><li>​所有引用类型的默认值都是null。</li><li>​一个引用变量可以用来引用任何与之兼容的类型。</li><li>​例子：Site site &#x3D; new Site(“Runoob”)。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Java使用变量之前必须声明</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>Java局部变量是在方法、构造函数或块内部声明的变量，Java局部变量使用前必须初始化，否则会无法编译;<em><strong>其作用域限制在声明它的代码块内部</strong></em></p><h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><p>实例变量是在类中声明，但在方法、构造函数或块之外，它们属于类的实例，每个类的实例都有自己的副本；实例变量如果未初始化则会保存为自身的默认值<strong>我们可以通过对象访问实例变量，也可以通过类名访问静态变量</strong></p><h4 id="静态变量或类变量"><a href="#静态变量或类变量" class="headerlink" title="静态变量或类变量"></a>静态变量或类变量</h4><p>使用static关键字声明，属于类但是不是实例，该变量会在类加载时初始化且只初始化一次，所有该类的实例共享一个类变量的值（表示这个静态变量被所有对象共享，并且每次改变会影响到其他对象）<strong>通过类名和实例名访问</strong></p><h4 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h4><p>参数是方法或构造函数声明中的变量，用于接收调用该方法或构造函数时传递的值，*** 参数变量的作用域只限于方法内部***</p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p>常量使用final修饰，使用全大写，单词之间下划线隔开</p><p>参数；类名，局部变量；静态变量；实例变量使用驼峰命名法，即小写字母开头，后面为大写字母</p><p>变量名应该具有描述性</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>命名空间</title>
      <link href="/2024/12/04/2024-12-04-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2024/12/04/2024-12-04-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>命名空间主要是为了解决同一作用域中定义重复的元素而导致代码混乱，命名空间通过全局作用域分割独立空间来解决以上问题</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>#include&lt;stdio.h&gt;<br>int rand &#x3D; 10;<br>int main()<br>{<br>    printf(“%d\n”,rand);<br>    return 0;<br>}</p><p>此时正常，当时如果在头文件中加入rand函数所在的头文件就会出现计算机运行程序时找到了两个rand函数，而出现错误</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>定义命名空间时使用namespace，后面接定义空间的名称并且接{}，然后再{}中接空间成员</p><p>命名空间可以嵌套，类似C语言中的循环嵌套，但是命名空间只能在全局范围内定义</p><p>使用命名空间内成语有三种方法</p><p>第一：使用作用域限定符<a><a href="https://blog.csdn.net/2302_78391795/article/details/142230911">【C++指南】作用域限定符 :: 使用详解_c++ 限定作用域-CSDN博客</a></a></p><p>第二：将命名空间全部展开（cpp using namespace xxx）</p><p>此方法有风险，三思而后行</p><p>第三：将命名空间部分展开（ using XXX :: xxx;）<br>可以在不全部展开的情况下不使用作用域限定符！！！</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>这个概念适用于c++与c#，其他语言部分可用但是不推荐</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="/2024/12/02/html/"/>
      <url>/2024/12/02/html/</url>
      
        <content type="html"><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><!DOCTYPE html><p>这句活就是告诉我们使用那个html版本。<br>只需要记住，看到上面这行代码，说明使用的是html5的版本。</p><meta charset = "UTF-8">utf-8是目前最常用的字符集编码方式，其他的还有gb2312(简单中文)，BIG5(繁体中文)，GBK(全部中文字符)，UTF-8(全世界所有国家需要用到的字符！)。这里只需要记录UTF-8。<h1>~<h6>大小依次递减，注意没有<7>啥的，只有这六个！<hr>用与分隔内容<p>属性</p><hr width="400">1.属性采用的是“键值对”的形式，key = "value" 格式(每个键对应着相应的值， 当按下相应的键时， 就会输出相应的结果)2.属性不分先后顺序！3.任何属性都有默认值，忽略该属性则取默认值。4.属性包括在引号里面，无论是单引号还是双引号都可以，但是如果属性本身带有双引号则必须使用单引号<p>class:为html元素定义一个或多个类名（classname）(类名从样式文件引入)<br>id:定义元素的唯一id（id 属性可用于创建一个 HTML 文档书签）<br>style:规定元素的行内样式（inline style）<br>title:描述了元素的额外信息 (作为工具条使用)</p><p>HTML在浏览器当中显示时，会将多余的空白或者空格变为一个空格（即使是<br>换行也是如此</p><p>href和src的区别<br>              href用于 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的联系<br>              src会将其指向的资源下载并应用到文档中，比如 JavaScript 脚本，img 图片</p><p>HTML链接属性（使用<a>和</a>标签链接）<br>1、href：定义链接目标</p><p>2、target：定义链接的打开方式<br> blank: 在新窗口或新标签页中打开链接。<br>_self: 在当前窗口或标签页中打开链接（默认）。<br>_parent: 在父框架中打开链接。<br>_top: 在整个窗口中打开链接，取消任何框架。3、rel：定义链接与目标页面的关系</p><p>4、download：提示浏览器下载链接目标而不是导航到该目标</p><p>5、title：定义链接的额外信息，当鼠标悬停在链接上时显示的工具提示</p><p>6、id：用于链接锚点，通常在同一页面中跳转到某个特定位置</p><p>7、hreflang: 指定链接的目标URL的语言</p><p>8、type: 指定链接资源的MIME类型</p><p>9、class: 用于指定元素的类名（CSS中定义）</p><p>10、style: 直接在元素上定义CSS样式</p><p>HTML 链接 -taget属性可以定义被链接的文档在何处显示</p><p>HTML元素</p><head> 元素包含了所有的头部标签元素<title> 元素:定义了浏览器工具栏的标题当网页添加到收藏夹时，显示在收藏夹中的标题显示在搜索引擎结果页面的标题<base> 标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接:]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
