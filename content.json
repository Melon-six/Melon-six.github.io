{"meta":{"title":"实验基地","subtitle":"","description":"","author":"暮寒溪","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"一、学习目标","slug":"一、学习目标","date":"2025-03-08T02:03:29.224Z","updated":"2025-03-08T02:03:29.225Z","comments":true,"path":"2025/03/08/一、学习目标/","link":"","permalink":"http://example.com/2025/03/08/%E4%B8%80%E3%80%81%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/","excerpt":"","text":"Title：学习计划data：2025-3-8一、学习目标 短期目标（3个月）：掌握前后端基础，能独立开发简单的全栈应用（如博客系统）。 中期目标（6个月）：深入框架和工具链，构建复杂应用（如电商平台）。 长期目标（12个月）：掌握工程化、性能优化和架构设计，达到求职或独立开发水平。 二、学习路线图阶段一：基础巩固（1-2个月） 技能模块 学习内容 学习资源 前端基础 - HTML5&#x2F;CSS3 高级特性 - JavaScript ES6+（异步、闭包、模块化） MDN Web Docs JavaScript.info 后端基础 - Python 进阶（装饰器、生成器、协程） - Flask&#x2F;Django 基础 Flask 官方文档 Django 官方教程 数据库 - SQL 高级（事务、索引优化） - ORM（SQLAlchemy&#x2F;Django ORM） SQLZoo Django ORM 指南 工具 - Git 基础 - VS Code 或 PyCharm 使用 Pro Git 中文版 阶段二：技术进阶（2-4个月） 技能模块 学习内容 学习资源 前端框架 - React&#x2F;Vue 核心概念（组件、状态管理、路由） - 前端工程化（Webpack、Vite） React 官方教程 Vue 官方指南 后端进阶 - RESTful API 设计 - 认证与授权（JWT、OAuth2） - 微服务基础 Django REST Framework FastAPI 文档 数据库扩展 - NoSQL（MongoDB&#x2F;Redis） - 数据库分库分表 MongoDB 大学 Redis 官方文档 测试与调试 - 单元测试（PyTest&#x2F;Jest） - 接口测试（Postman） PyTest 文档 Postman 学习中心 阶段三：全栈实战（3-6个月） 项目类型 项目目标 技术栈 个人博客 - 支持文章发布、评论、用户管理 - 前后端分离架构 前端：React + Ant Design 后端：Django REST Framework + MySQL 电商平台 - 商品管理、购物车、支付集成（如支付宝沙箱） - 性能优化 前端：Vue3 + Pinia + Vite 后端：FastAPI + PostgreSQL + Celery 协作工具 - 实时协作（WebSocket） - 文件上传（AWS S3&#x2F;MinIO） 前端：Next.js + Tailwind CSS 后端：NestJS + MongoDB + Redis","categories":[],"tags":[]},{"title":"异步请求","slug":"异步请求","date":"2025-03-03T23:39:13.701Z","updated":"2025-03-03T23:39:13.701Z","comments":true,"path":"2025/03/04/异步请求/","link":"","permalink":"http://example.com/2025/03/04/%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/","excerpt":"","text":"tetle：python2异步请求 发送请求时，程序不会等待响应，而是回直接返回继续执行其他任务，当请求先赢回来时，程序会收到回调通知来处理这个响应 使用aiohttp和asyncio来实现异步请求 async用于定义异步函数，表示改函数为协程函数（协程函数是可以暂停和恢复的程序） await用于等等异步操作完成，当异步程序遇到await时会暂停等待await后面操作完成，不会影响其他异步执行 asyncio是标准库，用于事件的循环实现，通过asyncio来启动事件循环 爬虫 发送HTTP请求 解析HTML内容 提取数据 储存数据 使用beautifulsoup库来提取网页数据，对于html和xml文件非常实用 如果发生中文乱码问题可以通过chardet来自动检测编码，在知道编码的情况下可以通过response.encoding&#x3D;‘ ’来设置 查找标签：通过find()和find-all（）方法，find返回一个匹配标签，但是find-all返回所有匹配标签 通过grt-text（）方法查看标签文本内容 还可以通过parent和children属性来访问父与子标签 还可以通过传递属性来查找所有具有特定属性的标签","categories":[],"tags":[]},{"title":"一、官方核心库","slug":"一、官方核心库","date":"2025-03-03T08:44:52.423Z","updated":"2025-03-03T08:44:52.425Z","comments":true,"path":"2025/03/03/一、官方核心库/","link":"","permalink":"http://example.com/2025/03/03/%E4%B8%80%E3%80%81%E5%AE%98%E6%96%B9%E6%A0%B8%E5%BF%83%E5%BA%93/","excerpt":"","text":"以下是 Kotlin 生态中常用的核心依赖库及其官方学习地址，分类整理供参考： 一、官方核心库 库名称 用途 官方地址 Kotlin Standard Library 标准库（集合、扩展函数等） kotlinlang.org&#x2F;docs&#x2F;reference Kotlin Coroutines 协程（异步编程） github.com&#x2F;Kotlin&#x2F;kotlinx.coroutines Kotlin Serialization 多平台数据序列化 github.com&#x2F;Kotlin&#x2F;kotlinx.serialization 二、Android开发 库名称 用途 官方地址 Android Jetpack 官方组件库 developer.android.com&#x2F;jetpack Compose 声明式UI框架 developer.android.com&#x2F;jetpack&#x2F;compose Coil 图片加载库 coil-kt.github.io&#x2F;coil Room 数据库ORM developer.android.com&#x2F;training&#x2F;data-storage&#x2F;room 三、异步&#x2F;响应式编程 库名称 特点 官方地址 Flow 冷数据流处理 kotlinlang.org&#x2F;docs&#x2F;flow RxKotlin ReactiveX扩展 github.com&#x2F;ReactiveX&#x2F;RxKotlin Channel 协程通信管道 kotlinlang.org&#x2F;docs&#x2F;channels 四、依赖注入 库名称 特点 官方地址 Koin 轻量级DI框架 insert-koin.io Dagger Hilt 官方推荐DI方案 dagger.dev&#x2F;hilt 五、网络请求 库名称 协议支持 官方地址 Ktor Client 多平台HTTP客户端 ktor.io&#x2F;clients Retrofit REST API封装 square.github.io&#x2F;retrofit 六、跨平台开发 库名称 平台支持 官方地址 KMM (Kotlin Multiplatform Mobile) iOS&#x2F;Android共享代码 kotlinlang.org&#x2F;lp&#x2F;mobile Compose Multiplatform 跨平台UI框架 www.jetbrains.com/lp/compose-mpp 七、测试相关 库名称 测试类型 官方地址 MockK Mock测试框架 mockk.io Kotest 多功能测试框架 kotest.io Turbine Flow测试工具 github.com&#x2F;cashapp&#x2F;turbine 八、实用工具库 库名称 功能 官方地址 Exposed SQL DSL &amp; ORM github.com&#x2F;JetBrains&#x2F;Exposed Arrow 函数式编程工具 arrow-kt.io Fuel 网络请求简化库 github.com&#x2F;kittinunf&#x2F;fuel","categories":[],"tags":[]},{"title":"SQL","slug":"SQL","date":"2025-03-03T01:49:34.777Z","updated":"2025-03-03T02:26:37.278Z","comments":true,"path":"2025/03/03/SQL/","link":"","permalink":"http://example.com/2025/03/03/SQL/","excerpt":"","text":"Tetley：SOLdate：2025-3-31234567891011# SQL 系统学习笔记## 一、SQL基础架构&#96;&#96;&#96;sqlSELECT [DISTINCT] &lt;字段列表&gt;FROM &lt;表名&gt;[WHERE &lt;条件&gt;][GROUP BY &lt;分组字段&gt;][HAVING &lt;分组条件&gt;][ORDER BY &lt;排序字段&gt;][LIMIT &lt;数量&gt;]; 二、核心操作分类1. DDL（数据定义语言） 命令 功能 示例 CREATE 创建数据库&#x2F;表 CREATE TABLE users (...) ALTER 修改表结构 ALTER TABLE users ADD COLUMN... DROP 删除数据库&#x2F;表 DROP TABLE temp_data TRUNCATE 快速清空表数据 TRUNCATE TABLE logs 表创建示例： 1234567CREATE TABLE employees ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL, salary DECIMAL(10,2), hire_date DATE DEFAULT CURRENT_DATE, INDEX idx_name (name)); 2. DML（数据操作语言） 命令 功能 示例 INSERT 插入数据 INSERT INTO users VALUES (...) UPDATE 更新记录 UPDATE products SET price=... DELETE 删除记录 DELETE FROM orders WHERE... 批量插入示例： 12345INSERT INTO departments (dept_name, budget)VALUES (&#39;Sales&#39;, 500000), (&#39;IT&#39;, 750000), (&#39;HR&#39;, 300000); 3. DQL（数据查询语言）基础查询123456SELECT product_id AS ID, product_name &quot;Product Name&quot;, unit_price * 0.9 AS discount_priceFROM productsWHERE category_id &#x3D; 3 AND stock_quantity &gt; 100; 高级查询12345678910-- JOIN示例SELECT o.order_id, c.customer_name, SUM(oi.quantity * oi.unit_price) totalFROM orders oJOIN customers c ON o.customer_id &#x3D; c.customer_idJOIN order_items oi ON o.order_id &#x3D; oi.order_idWHERE o.order_date BETWEEN &#39;2023-01-01&#39; AND &#39;2023-12-31&#39;GROUP BY o.order_id, c.customer_nameHAVING total &gt; 1000ORDER BY total DESCLIMIT 10; 三、关键函数速查1. 聚合函数 函数 说明 示例 COUNT() 统计行数 COUNT(DISTINCT dept) SUM() 求和 SUM(sales_amount) AVG() 平均值 AVG(rating) MAX&#x2F;MIN() 最大&#x2F;最小值 MAX(temperature) 2. 字符串函数1234CONCAT(first_name, &#39; &#39;, last_name) AS full_name,SUBSTRING(phone, 1, 3) AS area_code,LENGTH(address) AS addr_length,REPLACE(description, &#39;old&#39;, &#39;new&#39;) 3. 日期函数123CURRENT_DATE() AS today,DATE_ADD(hire_date, INTERVAL 1 YEAR) AS anniversary,DATEDIFF(NOW(), order_date) AS days_passed 四、高级功能1. 事务控制1234START TRANSACTION;UPDATE accounts SET balance &#x3D; balance - 100 WHERE user_id &#x3D; 1;UPDATE accounts SET balance &#x3D; balance + 100 WHERE user_id &#x3D; 2;COMMIT; -- 或 ROLLBACK 2. 窗口函数1234567SELECT employee_id, department_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS dept_rank, AVG(salary) OVER (PARTITION BY department_id) AS dept_avg_salaryFROM employees; 3. CTE（公共表表达式）12345678WITH regional_sales AS ( SELECT region, SUM(amount) total_sales FROM orders GROUP BY region)SELECT region, total_salesFROM regional_salesWHERE total_sales &gt; 1000000; 五、性能优化要点1. 索引策略 为WHERE&#x2F;JOIN&#x2F;ORDER BY字段创建索引 避免过度索引（写操作性能影响） 使用复合索引时注意字段顺序 2. 查询优化 避免使用SELECT * 慎用LIKE &#39;%前缀%&#39; 合理使用EXPLAIN分析执行计划 注意隐式类型转换 3. 设计规范 使用合适的字段类型（如INT vs VARCHAR） 遵循数据库范式（但不要过度设计） 建立有效的外键约束 定期进行表维护（OPTIMIZE TABLE） 六、安全最佳实践 使用预处理语句防止SQL注入 12# Python示例cursor.execute(&quot;SELECT * FROM users WHERE id &#x3D; %s&quot;, (user_id,)) 遵循最小权限原则 定期备份重要数据 敏感数据加密存储 审计日志记录 七、不同数据库差异速查 特性 MySQL PostgreSQL SQLite 自增字段 AUTO_INCREMENT SERIAL AUTOINCREMENT 字符串拼接 CONCAT() &#96; &#96; 操作符 &#96; &#96; 时间类型 DATETIME TIMESTAMP TEXT 正则表达式 REGEXP ~ 操作符 需扩展","categories":[],"tags":[]},{"title":"python2","slug":"python2","date":"2025-03-03T00:28:02.145Z","updated":"2025-03-03T01:49:51.173Z","comments":true,"path":"2025/03/03/python2/","link":"","permalink":"http://example.com/2025/03/03/python2/","excerpt":"","text":"tetle：python2异步请求 发送请求时，程序不会等待响应，而是回直接返回继续执行其他任务，当请求先赢回来时，程序会收到回调通知来处理这个响应 使用aiohttp和asyncio来实现异步请求 async用于定义异步函数，表示改函数为协程函数（协程函数是可以暂停和恢复的程序） await用于等等异步操作完成，当异步程序遇到await时会暂停等待await后面操作完成，不会影响其他异步执行 asyncio是标准库，用于事件的循环实现，通过asyncio来启动事件循环 爬虫 发送HTTP请求 解析HTML内容 提取数据 储存数据 使用beautifulsoup库来提取网页数据，对于html和xml文件非常实用 如果发生中文乱码问题可以通过chardet来自动检测编码，在知道编码的情况下可以通过response.encoding&#x3D;‘ ’来设置 查找标签：通过find()和find-all（）方法，find返回一个匹配标签，但是find-all返回所有匹配标签 通过grt-text（）方法查看标签文本内容 还可以通过parent和children属性来访问父与子标签 还可以通过传递属性来查找所有具有特定属性的标签","categories":[],"tags":[]},{"title":"python","slug":"python","date":"2025-03-01T08:35:47.170Z","updated":"2025-03-04T00:07:52.672Z","comments":true,"path":"2025/03/01/python/","link":"","permalink":"http://example.com/2025/03/01/python/","excerpt":"","text":"title：python date:2025-3-11：在python中，非零的值都视为true，而0则为False if-else 结构用于在一个条件为真时执行一段代码，如果条件不成立，则执行另一段代码。 if-elif-else 结构用于处理多个条件，允许你在多个条件中选择一个进行执行。elif 是“else if”的缩写 for -eles一般执行循环语句的结尾，即当循环结束时才会执行eles代码块，但是如果中途出现break语句并触发，则else不会执行，否则执行else pass语句为占位语句，一般而言当你写了if语句当时下一个代码块暂时不想写时可以用pass语句代替，以此保证代码完整避免出现语法错误 ragen内置函数可以生成一个可迭代的序列，并且帮你遍历一遍，ragen返回的不是列表，而是一个对象（迭代器），这个对象可以按需生成数字等；需用list(range())转换为列表 len内置函数获取对象长度 a &#x3D; [‘Google’, ‘Baidu’, ‘Runoob’, ‘Taobao’, ‘QQ’] for i in range(len(a)): print(i, len(a[i])) 该代码中输出了列表a个元素的长度，但是如果将print（i，len（a【i】））改为print（i，a【i】）则会输出元素**因为len是获取对象的长度，len(a）是获取列表的长度进行循环，比如a的长度是5就是循环5次 ** 推导式1.推导式分为：列表推导式，字典推导式，集合推导式以及生成器推导式；元组推导式 元组推导式和列表推导式的用法也完全相同，只是元组推导式是用 ()圆括号将各部分括起来，而列表推导式用的是中括号 []，另外元组推导式返回的结果是一个生成器对象，使用圆括号的推导式实际创建的是生成器表达式（generator），而非严格意义上的元组推导式 推导式非常强大且简洁，可以大大提高代码的可读性和效率，尤其在处理简单的循环和条件判断时非常有用。 列表推导式： squares &#x3D; [x**2 for x in range(10)] print(squares) # 输出：[0, 1, 4, 9, 16, 25, 36, 49, 64, 81] 字典推导式： squares_dict &#x3D; {x: x**2 for x in range(5)} print(squares_dict) # 输出：{0: 0, 1: 1, 2: 4, 3: 9, 4: 16} 集合推导式： even_set &#x3D; {x for x in range(10) if x % 2 &#x3D;&#x3D; 0} print(even_set) # 输出：{0, 2, 4, 6, 8} 生成器推导式： gen &#x3D; (x**2 for x in range(10)) for number in gen: print(number) 2.迭代器是一种可以逐个访问元素的对象 生成器是一种特殊的迭代器，但是他更加简洁且生成器允许你逐个生成数据，并会为你节省内存，因为生成器不会一次性把数据加载到内存中，可以在你需要时才加载下一个数据 （生成器和普通函数不一样，生成器简单来说就是一个返回迭代器的函数） 迭代器有两个基本的方法：iter() 和 next()，把一个类作为迭代器使用也需要实现这连个方法，irer()会返回一个特殊的迭代器（本身）；next()会返回下一个迭代器对象 当我们在 Python 中使用迭代器时，也就是使用next获取下一个元素时；如果迭代器中已经没有更多的元素了，Python 会抛出一个 StopIteration 异常，表示迭代已经结束，无法再获取更多的元素。 （StopIteration&#96; 异常是为了防止无限循环出现的情况） 创建生成器使用yield语句；每次调用生成器的 next() 方法或使用 for 循环进行迭代时，函数会从上次暂停的地方继续执行，直到再次遇到 yield 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果 3.在python中，数量，元组和字符串是不能修改的对象 在python中如果在fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。 调用函数四个知识 1.必须参数：必须以正确的顺序传入函数，调用的数量必须与声明的一致 2.关键字参数：函数调用时使用关键字来确定传入参数值 3.默认参数：调用函数时，如果没有进行传递参数，则会使用默认参数 4.不定长参数：当你需要的函数比当初声明的要更多参数时，这些参数叫做不定长参数 装饰器装饰器通过 @ 符号应用在函数定义之前 @time_loggerdef target_function(): pass 装饰器允许你动态的修改函数和类 装饰器的语法使用 @decorator_name 来应用在函数或方法上。 装饰其本身也是函数，通过接受一个函数作为参数，来修改原来的函数 @staticmethod 和 @classmethod，用于定义静态方法和类方法。 装饰器在接受一个函数并修改后会返回一个新的函数，这个函数和自己定义的函数有区别，也被称为包装函数，这个函数可以理解为接收函数的增强版 装饰器可以修改原函数传入的参数，也可以在函数执行前后修改改函数的行为，并处理原函数的异常处理行为，修改返回值；装饰器也可以接受参数 （装饰器尽可能会保存原函数的核心功能，确保原函数的行为不会被破坏） 类装饰器 stack&#x3D;[] stack.append(3) stack.append(5) stack.append(9) print (stack) abb&#x3D;stack stack.pop(2)此处（）里加索引，会不加，默认去除最后一个元素 print(abb) 队列与栈出栈取最后一个元素，出队则是第一个元素 特性 栈（Stack） 队列（Queue） 存取顺序 后进先出（LIFO） 先进先出（FIFO） 基本操作 压栈（Push）、弹栈（Pop） 入队（Enqueue）、出队（Dequeue） 常见应用 函数调用、回溯、表达式求值 任务调度、广度优先搜索、消息队列 类比 叠起来的盘子 排队的人 元组不可变，若元组的成员可变类型，则成员可编辑:意思是元组不可变的是结构，但是元组里面的可变类型成员可以被编辑 异常处理try和except，除此之外还可以加一个else，但是else要放在except后 除此之外还有一个try和finally的语句；这个语句中finally无论有无异常都会执行最后的代码 (try下代码属于测试能不能跑，类似判断，else则是代码测试没有异常时执行) try 语句中判断文件是否可以打开，如果打开文件时正常的没有发生异常则执行 else 部分的语句else语句要放在trc里面，避免异常 异常处理不是只处理发生在trc里面的，还可以处理函数的异常，间接函数也行 异常处理中还可以使用raise语句抛出一个指定异常 x &#x3D; 10if x &gt; 5: raise Exception(‘x 不能大于 5。x 的值为: {}’.format(x)) 命名空间和作用域命名空间可以避免项目中重名，因为每个命名空间是独立互不干扰的，在同一命名空间中不能重名，但是不在同一命名空间则可以 命名空间分为，python自带的内置空间和模块的全局以及函数的局部空间 当作用域中的对象执行完时，命名空间结束 作用域可以直接访问命名空间的内容 python中命名空间大部分通过字典实现 四种作用域：L：局部 G：全局变量 B：内置 E：嵌套函数（比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal ） 作用域查找顺序：L,E,G,B 总结 全局变量在函数外部定义，可以在整个文件中访问。 局部变量在函数内部定义，只能在函数内访问。 使用 global 可以在函数中修改全局变量。 使用 nonlocal 可以在嵌套函数中修改外部函数的变量。 del:关键字，删除对象，变量，数据结构里的元素和属性 def：定义函数 as：as 是一个关键字，用来为导入的模块、函数或类指定一个别名 import：可以导入模块还可以导入文件与标准库 impot和as可以结合使用，使得代码简洁，比如 imort math as m这行代码表示导入模块math并将其命名为m init：特殊的方法，构造函数","categories":[],"tags":[]},{"title":"越权漏洞","slug":"越权漏洞","date":"2025-02-28T09:21:57.154Z","updated":"2025-02-28T09:21:57.154Z","comments":true,"path":"2025/02/28/越权漏洞/","link":"","permalink":"http://example.com/2025/02/28/%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"data:玄境靶场 越权漏洞理解：分为水平越权与垂直越权以及逻辑问题导致的安全隐患，水平越权就是用户之间的权限漏洞，垂直越权则是用户与管理员直接的权限漏洞；逻辑暂时不理解1：能够通过抓包直接直接更改自己账户uid2：通过抓包发现可以更改用户类型，将自己账户类型更改为管理员（注意看清楚自己越权对象，管理员一般为admin小写）3：参数置空支付漏洞理解在支付中，前端会向后端传输数据与参数，以便后端返回支付界面或其他，以及进行数据加密 1：直接修改商品金额2：由于后端限制，商品金额不能为负数或者0，修改商品数量与优惠券金额，使得相加为0，从而骗过后端登录漏洞1：当遇到只能用以及有的账户登录时可以尝试admin等常见账户2：可以通过修改返回值来跳过前端验证","categories":[],"tags":[]},{"title":"查找qq","slug":"查找qq","date":"2024-12-27T09:19:04.960Z","updated":"2024-12-27T09:19:04.961Z","comments":true,"path":"2024/12/27/查找qq/","link":"","permalink":"http://example.com/2024/12/27/%E6%9F%A5%E6%89%BEqq/","excerpt":"","text":"查找qq1.网上搜索（qq）社工库 2.Q绑在线查询 3.搜索引擎和又一套语法 （双引号加qq号）","categories":[],"tags":[]},{"title":"漏洞","slug":"漏洞","date":"2024-12-26T12:51:46.901Z","updated":"2024-12-26T12:51:46.901Z","comments":true,"path":"2024/12/26/漏洞/","link":"","permalink":"http://example.com/2024/12/26/%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"漏洞文件下载漏洞判断文件是否存在文件下载漏洞： 1. 一般链接形式： date.php?file&#x3D; date.php?path&#x3D; 2 包含参数： &amp;src&#x3D; &amp;ata&#x3D; 目录穿越: ..&#x2F;返回上一级目录 ​ 返回根目录多加几个..&#x2F; 文件上传漏洞通过获取webshell来控制服务器最快的方法 webshell木马程序基于http协议来访问控制","categories":[],"tags":[]},{"title":"SQL注入","slug":"SQL注入","date":"2024-12-26T10:49:33.386Z","updated":"2024-12-26T10:49:33.386Z","comments":true,"path":"2024/12/26/SQL注入/","link":"","permalink":"http://example.com/2024/12/26/SQL%E6%B3%A8%E5%85%A5/","excerpt":"","text":"SQL注入SQL注入分为整型和字符型","categories":[],"tags":[]},{"title":"渗透知识（1）","slug":"渗透知识（1）","date":"2024-12-26T02:45:23.768Z","updated":"2024-12-26T03:39:43.778Z","comments":true,"path":"2024/12/26/渗透知识（1）/","link":"","permalink":"http://example.com/2024/12/26/%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89/","excerpt":"","text":"HTTP超文本传输协议；默认端口为80，用于从万维网服务器传输超文本到本地浏览器协议，主要用于规定客户端和服务器的数据传输格式 HTTP请求分为请求报文和响应报文 请求报文分为：请求行，请求头部，空一行（请求正文即请求体有的请求报文可能没有） 直接在浏览器的地址栏中输入 URL 时，通常不会携带请求体 请求行分为三部分：1.请求方法 2.资源地址（资源定位符） 3.HTTP协议和版本号的说明 请求方法具有： 1.GET 请求资源 2.POST 提交资源 3.Head 获取响应头 4.DELETE 删除资源 5.PUT 替换资源 6.OPTLONS 允许客户端查看服务器性能 7.TRACE 回显服务器寿佛啊的请求，用于测试或诊断 Fiddler可以抓Edge和谷歌浏览器，火狐浏览器需要设置其他东西即可 不能抓包微信小程序，因为有设置抓不住，app和小程序不一定能抓，现在大部分都有设置防抓","categories":[],"tags":[]},{"title":"查询lP地址","slug":"查询lP地址","date":"2024-12-23T16:42:25.263Z","updated":"2024-12-24T00:45:59.344Z","comments":true,"path":"2024/12/24/查询lP地址/","link":"","permalink":"http://example.com/2024/12/24/%E6%9F%A5%E8%AF%A2lP%E5%9C%B0%E5%9D%80/","excerpt":"","text":"查询lP地址Windows： 打开命令提示符（按 Win + R，然后输入 cmd，按回车）。 在命令行窗口中，输入以下命令并按回车： 1bash 1nslookup 网站域名 例如，要查看 www.example.com 的 IP 地址： 12bashnslookup www.example.com 网站数据库SQL注入获取信息 通过开发工具F12获取信息 查询php版本使用 curl 命令查询 HTTP 响应头：12bashcurl -I http:&#x2F;&#x2F;example.com","categories":[],"tags":[]},{"title":"Java","slug":"2024-12-06-Java","date":"2024-12-05T16:00:00.000Z","updated":"2024-12-20T02:56:40.810Z","comments":true,"path":"2024/12/06/2024-12-06-Java/","link":"","permalink":"http://example.com/2024/12/06/2024-12-06-Java/","excerpt":"","text":"基础jdk也称Java jdk，可以理解为Java的库也就是c语言中的头文件吧可能 sdk则是Java用用于开发软件所存在的一个概念，可以理解为开发工具 Java是一门具有面向对象的编程语言，Java性能强支持多线程运行 Java对大小写敏感，Java的类名开头字母需要大写，如果类名存在多个单词则需要每个单词首字母大写，而方法名则是开头需要小写，但是如果存在多个单词则和类名不一样，后面的需要大写，并且源文件名必须与方法名相同保存并加入Java后缀，否则会编译出错 java标识符必须以字母或者下划线以及$开头，并且对大小敏感，关键字不能作为标识符 Java修饰符分为访问控制和非访问控制符 Java变量分为局部变量和静态变量以及非静态变量 Java在5.0引入了枚举概念 Java注释与c语言和c++类似，但是加入了文档注释（文档注释以 &#x2F;** 开始，以 *&#x2F; 结束，通常出现在类、方法、字段等的声明前面，用于生成代码文档，这种注释可以被工具提取并生成 API 文档，如 JavaDoc。） java继承有超类与子类俩个概念，被继承者称为超类，继承者则称为子类与派生类 Java接口则在继承中起作用，主要为为派生类定义需要用到的方法 java在创建对象时必须要有一个构造方法，一般Java会自动创建一个构造一个方法；构造的方法必须与类名一样且一个类可以有多个构造方法 Java源文件中可以有多个类，但是每个类各不相同并且也不能存在俩个相同的类 如果一个类定义在某个包中，那么 package 语句应该在源文件的首行；如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面；import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。 Java内部类：在Java类中嵌套另外一个类 嵌套类分为静态内部类和非静态内部类，内部类可以直接访问外部类属性和方法，静态内部类无法访问外部类的成员，当想要外部类无法访问内部类时可以使用private来修饰也称为内部私有化；静态内部类使用staic关键字定义（静态内部类不用创建外部类来访问，因为可以直接访问） Java匿名类是不能有名字的类，它们不能被引用，只能在创建时用 new 语句来声明它们；匿名类主要用于继承一个父类和实现一个接口 Java包用于对类和类的接口进行分类 Java中import语句用于提供一个合理的路径，使编译器可以找到某个类 数据类型Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型 数字类型：byte，shout，int，flout，double，long 字符类型：char 布尔类型：boolean（默认值为false） int, short, long, byte 的默认值是0。 char 的默认值是 \\u0000（空字符）。 float 的默认值是 0.0f。 double 的默认值是 0.0d。 boolean 的默认值是 false。 引用类型（类、接口、数组）的默认值是 null。 JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作 类型转化**自动类型转化：整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。**转换从低级到高级 规则：必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。 强制类型转化 条件是转换的数据类型必须是兼容的。 格式：(type)value type是要强制类型转换后的数据类型 实例： ** 实例** public class ForceTransform { public static void main(String[] args){ int i1 &#x3D; 123; byte b &#x3D; (byte)i1;&#x2F;&#x2F;强制类型转换为byte System.out.println(“int强制类型转换为byte后的值等于”+b); } } 运行结果： 1int强制类型转换为byte后的值等于123 隐含强制类型转化 1、 整数的默认类型是 int。 小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f java 里使用 long 类型的数据一定要在数值后面加上 L，否则将作为整型解析： 数据类型转换必须满足如下规则： 不能对boolan类型进行类型转换。 不能把对象类型转换成不相关类的对象。 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。 转换过程中可能导致溢出或损失精度，例如： 12int i &#x3D;128; byte b &#x3D; (byte)i; 因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如： 12(int)23.7 &#x3D;&#x3D; 23; (int)-45.89f &#x3D;&#x3D; -45 引用类型 ​ 在Java中，引用类型的变量非常类似于C&#x2F;C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。 ​ 对象、数组都是引用数据类型。 ​ 所有引用类型的默认值都是null。 ​ 一个引用变量可以用来引用任何与之兼容的类型。 ​ 例子：Site site &#x3D; new Site(“Runoob”)。 变量Java使用变量之前必须声明 局部变量Java局部变量是在方法、构造函数或块内部声明的变量，Java局部变量使用前必须初始化，否则会无法编译;其作用域限制在声明它的代码块内部 实例变量实例变量是在类中声明，但在方法、构造函数或块之外，它们属于类的实例，每个类的实例都有自己的副本；实例变量如果未初始化则会保存为自身的默认值我们可以通过对象访问实例变量，也可以通过类名访问静态变量 静态变量或类变量使用static关键字声明，属于类但是不是实例，该变量会在类加载时初始化且只初始化一次，所有该类的实例共享一个类变量的值（表示这个静态变量被所有对象共享，并且每次改变会影响到其他对象）通过类名和实例名访问 参数变量参数是方法或构造函数声明中的变量，用于接收调用该方法或构造函数时传递的值，*** 参数变量的作用域只限于方法内部*** 命名规则常量使用final修饰，使用全大写，单词之间下划线隔开 参数；类名，局部变量；静态变量；实例变量使用驼峰命名法，即小写字母开头，后面为大写字母 变量名应该具有描述性","categories":[],"tags":[]},{"title":"命名空间","slug":"2024-12-04-命名空间","date":"2024-12-03T16:00:00.000Z","updated":"2024-12-05T01:13:39.281Z","comments":true,"path":"2024/12/04/2024-12-04-命名空间/","link":"","permalink":"http://example.com/2024/12/04/2024-12-04-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/","excerpt":"","text":"定义命名空间主要是为了解决同一作用域中定义重复的元素而导致代码混乱，命名空间通过全局作用域分割独立空间来解决以上问题 实例#include&lt;stdio.h&gt;int rand &#x3D; 10;int main(){ printf(“%d\\n”,rand); return 0;} 此时正常，当时如果在头文件中加入rand函数所在的头文件就会出现计算机运行程序时找到了两个rand函数，而出现错误 用法定义命名空间时使用namespace，后面接定义空间的名称并且接{}，然后再{}中接空间成员 命名空间可以嵌套，类似C语言中的循环嵌套，但是命名空间只能在全局范围内定义 使用命名空间内成语有三种方法 第一：使用作用域限定符【C++指南】作用域限定符 :: 使用详解_c++ 限定作用域-CSDN博客 第二：将命名空间全部展开（cpp using namespace xxx） 此方法有风险，三思而后行 第三：将命名空间部分展开（ using XXX :: xxx;）可以在不全部展开的情况下不使用作用域限定符！！！ 备注这个概念适用于c++与c#，其他语言部分可用但是不推荐","categories":[],"tags":[]},{"title":"html","slug":"html","date":"2024-12-01T16:00:00.000Z","updated":"2024-12-02T06:44:24.741Z","comments":true,"path":"2024/12/02/html/","link":"","permalink":"http://example.com/2024/12/02/html/","excerpt":"","text":"html 这句活就是告诉我们使用那个html版本。只需要记住，看到上面这行代码，说明使用的是html5的版本。 utf-8是目前最常用的字符集编码方式，其他的还有gb2312(简单中文)，BIG5(繁体中文)， GBK(全部中文字符)，UTF-8(全世界所有国家需要用到的字符！)。 这里只需要记录UTF-8。 ~ 大小依次递减，注意没有啥的，只有这六个！ 用与分隔内容 属性 1.属性采用的是“键值对”的形式，key = \"value\" 格式(每个键对应着相应的值， 当按下相应的键时， 就会输出相应的结果) 2.属性不分先后顺序！ 3.任何属性都有默认值，忽略该属性则取默认值。 4.属性包括在引号里面，无论是单引号还是双引号都可以，但是如果属性本身带有双引号则必须使用单引号 class :为html元素定义一个或多个类名（classname）(类名从样式文件引入)id:定义元素的唯一id（id 属性可用于创建一个 HTML 文档书签）style:规定元素的行内样式（inline style）title:描述了元素的额外信息 (作为工具条使用) HTML在浏览器当中显示时，会将多余的空白或者空格变为一个空格（即使是换行也是如此 href和src的区别 href用于 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的联系 src会将其指向的资源下载并应用到文档中，比如 JavaScript 脚本，img 图片 HTML链接属性（使用和标签链接）1、href：定义链接目标 2、target：定义链接的打开方式 blank: 在新窗口或新标签页中打开链接。_self: 在当前窗口或标签页中打开链接（默认）。_parent: 在父框架中打开链接。_top: 在整个窗口中打开链接，取消任何框架。3、rel：定义链接与目标页面的关系 4、download：提示浏览器下载链接目标而不是导航到该目标 5、title：定义链接的额外信息，当鼠标悬停在链接上时显示的工具提示 6、id：用于链接锚点，通常在同一页面中跳转到某个特定位置 7、hreflang: 指定链接的目标URL的语言 8、type: 指定链接资源的MIME类型 9、class: 用于指定元素的类名（CSS中定义） 10、style: 直接在元素上定义CSS样式 HTML 链接 -taget属性可以定义被链接的文档在何处显示 HTML元素 元素包含了所有的头部标签元素 元素: 定义了浏览器工具栏的标题 当网页添加到收藏夹时，显示在收藏夹中的标题 显示在搜索引擎结果页面的标题 标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接:","categories":[],"tags":[]}],"categories":[],"tags":[]}